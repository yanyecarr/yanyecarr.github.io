<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yanyecarr.github.io/</id>
    <title>carr</title>
    <updated>2020-04-05T13:57:32.940Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yanyecarr.github.io/"/>
    <link rel="self" href="https://yanyecarr.github.io//atom.xml"/>
    <subtitle>欲买桂花同载酒，终不似，少年游</subtitle>
    <logo>https://yanyecarr.github.io//images/avatar.png</logo>
    <icon>https://yanyecarr.github.io//favicon.ico</icon>
    <rights>All rights reserved 2020, carr</rights>
    <entry>
        <title type="html"><![CDATA[Elasticsearch与部署]]></title>
        <id>https://yanyecarr.github.io//post/elasticsearch-yu-bu-shu</id>
        <link href="https://yanyecarr.github.io//post/elasticsearch-yu-bu-shu">
        </link>
        <updated>2020-04-04T16:04:49.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1es定义">1.ES定义</h2>
<blockquote>
<p>ES=elaticsearch简写， Elasticsearch是一个开源的高扩展的分布式全文检索引擎，它可以近乎实时的存储、检索数据；本身扩展性很好，可以扩展到上百台服务器，处理PB级别的数据。
Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p>
</blockquote>
<h2 id="2lucene与es关系">2.Lucene与ES关系</h2>
<blockquote>
<p>1）Lucene只是一个库。想要使用它，你必须使用Java来作为开发语言并将其直接集成到你的应用中，更糟糕的是，Lucene非常复杂，你需要深入了解检索的相关知识来理解它是如何工作的。</p>
<p>2）Elasticsearch也使用Java开发并使用Lucene作为其核心来实现所有索引和搜索的功能，但是它的目的是通过简单的RESTful API来隐藏Lucene的复杂性，从而让全文搜索变得简单。</p>
</blockquote>
<h2 id="3-es主要解决问题">3 ES主要解决问题</h2>
<pre><code>1）检索相关数据； 
2）返回统计结果； 
3）速度要快。
</code></pre>
<h2 id="4es核心概念">4.ES核心概念</h2>
<pre><code>1）Cluster：集群。
ES可以作为一个独立的单个搜索服务器。不过，为了处理大型数据集，实现容错和高可用性，ES可以运行在许多互相合作的服务器上。这些服务器的集合称为集群。

2）Node：节点。
形成集群的每个服务器称为节点。

3）Shard：分片。
当有大量的文档时，由于内存的限制、磁盘处理能力不足、无法足够快的响应客户端的请求等，一个节点可能不够。这种情况下，数据可以分为较小的分片。每个分片放到不同的服务器上。 
当你查询的索引分布在多个分片上时，ES会把查询发送给每个相关的分片，并将结果组合在一起，而应用程序并不知道分片的存在。即：这个过程对用户来说是透明的。

4）Replia：副本。
为提高查询吞吐量或实现高可用性，可以使用分片副本。 
副本是一个分片的精确复制，每个分片可以有零个或多个副本。ES中可以有许多相同的分片，其中之一被选择更改索引操作，这种特殊的分片称为主分片。 
当主分片丢失时，如：该分片所在的数据不可用时，集群将副本提升为新的主分片。

5）全文检索。
全文检索就是对一篇文章进行索引，可以根据关键字搜索，类似于mysql里的like语句。 
全文索引就是把内容根据词的意义进行分词，然后分别创建索引，例如”你们的激情是因为什么事情来的” 可能会被分词成：“你们“，”激情“，“什么事情“，”来“ 等token，这样当你搜索“你们” 或者 “激情” 都会把这句搜出来。
</code></pre>
<h2 id="6es数据架构的主要概念与关系数据库mysql对比">6.ES数据架构的主要概念（与关系数据库Mysql对比）</h2>
<p><img src="https://yanyecarr.github.io//post-images/1586064437483.png" alt=""></p>
<pre><code>（1）关系型数据库中的数据库（DataBase），等价于ES中的索引（Index） 
（2）一个数据库下面有N张表（Table），等价于1个索引Index下面有N多类型（Type）， 
（3）一个数据库表（Table）下的数据由多行（ROW）多列（column，属性）组成，等价于1个Type由多个文档（Document）和多Field组成。 
（4）在一个关系型数据库里面，schema定义了表、每个表的字段，还有表和字段之间的关系。 与之对应的，在ES中：Mapping定义索引下的Type的字段处理规则，即索引如何建立、索引类型、是否保存原始索引JSON文档、是否压缩原始JSON文档、是否需要分词处理、如何进行分词处理等。 
（5）在数据库中的增insert、删delete、改update、查search操作等价于ES中的增PUT/POST、删Delete、改_update、查GET. 
</code></pre>
<h2 id="7es部署">7.ES部署</h2>
<h3 id="1环境准备">1.环境准备</h3>
<h4 id="11安装jdk">1.1安装jdk</h4>
<pre><code>两种方式：
1.命令安装:
1)查询要安装的jdk版本 yum -y list java* 
2) yum install -y java-1.8.0-openjdk.x86_64 3)java -version 查看是否安装 ps:默认安装到usr/lib/jvm下
2.手动安装:
1)先去官网下载jdk
2)上传到服务器 
3）解压 jdktar -zxvf jdk-8u211-linux-x64.tar.gz（jdk-8..这个是刚下载的jdk名称） 
4）配置环境变量：vim /etc/profile 最下面添加如下环境变量
export JAVA_HOME=/DATA/jdk/jdk1.8.0_211  -- 解压缩的路径
export CLASSPATH=$:CLASSPATH:$JAVA_HOME/lib/ 
export PATH=$PATH:$JAVA_HOME/bin
5）刷新环境变量命令:source /etc/profile 
6）java -version 查看是否安装
</code></pre>
<h4 id="21-安装elasticsearch">2.1 安装elasticsearch</h4>
<ul>
<li>
<p>下载安装包
官网地址：https://www.elastic.co/</p>
</li>
<li>
<p>解压安装包
tar -zxvf elasticsearch-7.7.1.tar.gz -C /export/servers(解压缩地址)</p>
</li>
<li>
<p>重命名安装目录
mv elasticsearch-7.7.1 elasticsearch</p>
</li>
<li>
<p>修改配置文件
cd elasticsearch中的config文件夹中 修改elasticsearch.yml文件</p>
<pre><code>#配置es的集群名称，默认是elasticsearch，es会自动发现在同一网段下的es，如果在同一网段下有多个集群，就可以用这个属性来区分不同的集群。
cluster.name: my-es
#节点名称
node.name: node-1
#设置索引数据的存储路径
path.data: /usr/local/elasticsearch/data
#设置日志的存储路径
path.logs: /usr/local/elasticsearch/logs
#设置当前的ip地址,通过指定相同网段的其他节点会加入该集群中
network.host: 0.0.0.0
#设置对外服务的http端口
http.port: 9200
#设置集群中master节点的初始列表，可以通过这些节点来自动发现新加入集群的节点
discovery.zen.ping.unicast.hosts: [&quot;127.0.0.1&quot;,&quot;10.10.10.34:9200&quot;]
</code></pre>
<p>注：</p>
</li>
</ul>
<p>1、补齐必要的目录</p>
<p>mkdir -p /usr/local/elasticsearch/data</p>
<p>mkdir -p /usr/local/elasticsearch/logs   (目录可能已经存在，需先确定清楚)</p>
<p>​		2、network.host: 0.0.0.0</p>
<p>修改Elasticsearch的配置，使其支持外网访问。在浏览器中，访问http://xxxx:9200/（xxxx是运行elasticsearch的服务器的ip地址）即可。否则这可以在本机使用。</p>
<h3 id="2解决报错">2.解决报错</h3>
<p>1.地址已在使用</p>
<p><img src="https://yanyecarr.github.io//post-images/1586016607915.png" alt=""></p>
<p>解决方法：</p>
<p>netstat -alnp | grep 9200</p>
<p><img src="https://yanyecarr.github.io//post-images/1586016618723.png" alt="">
kill -9 10220</p>
<p>2.在<a href="https://www.baidu.com/s?wd=root&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd">root</a>用户下启动时报错</p>
<p>因为安全问题elasticsearch 不让用root用户直接运行，所以要创建新用户。</p>
<p>具体操作如下:
　　useradd testuser
　　passwd testuser</p>
<p>chown -R testuser:testuser 解压缩路径</p>
<p>3.[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65535]</p>
<p>原因：Elasticsearch使用大量文件描述符或文件句柄。用完文件描述符可能是灾难性的，最有可能导致数据丢失。确保将运行Elasticsearch的用户的打开文件描述符数量限制增加到65,536或更高</p>
<p>vi /etc/security/limits.conf</p>
<p><img src="https://yanyecarr.github.io//post-images/1586064563841.png" alt="">
4.[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</p>
<p>vi /etc/sysctl.conf</p>
<p><img src="https://yanyecarr.github.io//post-images/1586064543751.png" alt=""></p>
<p>sysctl -p</p>
<p>[3]: the default discovery settings are unsuitable for production use; at least one of [discovery.seed_hosts, discovery.seed_providers, cluster.initial_master_nodes] must be configured</p>
<p>解决</p>
<p>vi elasticsearch.yml</p>
<p>取消注释</p>
<p>cluster.initial_master_nodes: [&quot;node-1&quot;, &quot;node-2&quot;]</p>
<p><img src="https://yanyecarr.github.io//post-images/1586016690073.png" alt=""></p>
<h3 id="3安装分词ik和head">3.安装分词IK和Head</h3>
<h4 id="安装分词ik">安装分词ik</h4>
<pre><code>下载地址：https://github.com/medcl/elasticsearch-analysis-ik/releases

将文件复制到ES /plugin/ik 下面
</code></pre>
<h4 id="安装head">安装Head</h4>
<blockquote>
<pre><code>elasticsearch-head是一个界面化的集群操作和管理工具，可以对集群进行傻瓜式操作。你可以通过插件把它集成到es（首选方式）,也可以安装成一个独立webapp。
es-head主要有三个方面的操作：
　　a、显示集群的拓扑,并且能够执行索引和节点级别操作
　　b、搜索接口能够查询集群中原始json或表格格式的检索数据
　　c、能够快速访问并显示集群的状态
有一个输入窗口,允许任意调用RESTful API。这个接口包含几个选项,可以组合在一起以产生有趣的结果; 
请求方法(get、put、post、delete),查询json数据,节点和路径
　　　　　　支持JSON验证器
　　　　　　支持重复请求计时器
　　　　　　支持使用javascript表达式变换结果
收集结果的能力随着时间的推移(使用定时器),或比较的结果，能力图表转换后的结果在一个简单的条形图(包括时间序列)
</code></pre>
</blockquote>
<pre><code>1. https://github.com/mobz/elasticsearch-head 下载解压
2.安装node.js
3. cd /path/to/elasticsearch-head
npm install -g grunt-cli
npm install
grunt server
4. http://localhost:9100/
5. 运行es
</code></pre>
<p>unzip解压失败</p>
<p>安装7zip</p>
<p>官网地址：http://www.7-zip.org/download.html</p>
<pre><code>tar -jxvf p7zip_16.02_src_all.tar.bz2
cd p7zip_16.02
make &amp;&amp; make install
</code></pre>
<ul>
<li>如果执行make命令时，提示安装g++的话，请执行 <code>yum install gcc-c++</code></li>
<li>出现 tar (child): bzip2: Cannot exec: No such file or directory，请安装<code>yum install bzip2 -y</code></li>
</ul>
<p>出现以下信息，即为安装完毕</p>
<pre><code>./install.sh /usr/local/bin /usr/local/lib/p7zip /usr/local/man /usr/local/share/doc/p7zip 

installing /usr/local/bin/7za

installing /usr/local/man/man1/7z.1

installing /usr/local/man/man1/7za.1

installing /usr/local/man/man1/7zr.1

installing /usr/local/share/doc/p7zip/README

installing /usr/local/share/doc/p7zip/ChangeLog

installing HTML help in /usr/local/share/doc/p7zip/DOC
</code></pre>
<p>7z命令的使用
解压缩7z文件</p>
<p>1参数含义：</p>
<ul>
<li>x 代表解压缩文件，并且是按原始目录树解压（还有个参数 e 也是解压缩文件，但其会将所有文件都解压到根下，而不是自己原有的文件夹下）</li>
<li>test.zip 是当前目录下的压缩文件，这里用做测试文件</li>
<li>-r 表示递归解压缩所有的子文件夹</li>
<li>-o 是指定解压到的目录，-o后是没有空格的，直接接目录(-o./ 为当前目录)</li>
</ul>
<p>压缩文件/文件夹</p>
<pre><code>7za a -t7z -r test.7z /opt/test/*
</code></pre>
<p>1参数含义：</p>
<ul>
<li>a 代表添加文件/文件夹到压缩包</li>
<li>-t 是指定压缩类型，这里定为7z，可不指定，因为7za默认压缩类型就是7z</li>
<li>-r 表示递归所有的子文件夹</li>
<li>test.7z 是压缩好后的压缩包名</li>
<li>/opt/test/* 是压缩目录
注意：7za不仅仅支持.7z压缩格式，还支持.zip.、tar、.bz2等压缩类型</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[常用Linux命令]]></title>
        <id>https://yanyecarr.github.io//post/chang-yong-linux-ming-ling</id>
        <link href="https://yanyecarr.github.io//post/chang-yong-linux-ming-ling">
        </link>
        <updated>2020-03-30T13:38:55.000Z</updated>
        <content type="html"><![CDATA[ <!-- more --> 
<h2 id="1帮助命令">1.帮助命令</h2>
<pre><code class="language-python">man --man命令 查看命令的使用帮助说明
</code></pre>
<h2 id="2显示目录和文件的命令">2.显示目录和文件的命令</h2>
<pre><code class="language-python">ls --用于查看当前目录所有文件夹的命令

dir -- 用于显示指定文件夹和目录的命令
tree -- 以树状图列出目录和内容
du -- 显示目录或文件大小
</code></pre>
<h2 id="3改变目录和查看当前目录的命令">3.改变目录和查看当前目录的命令</h2>
<pre><code>cd --进入工作目录
cd .. -- 回退到上一级命令
pwd -- 显示当前用户所在工作目录位置
</code></pre>
<h2 id="4修改目录文件权限和属主及数组命令">4.修改目录，文件权限和属主及数组命令</h2>
<pre><code>chmod -- 用于改变指定目录或文件的权限命令
chown -- 用于改变文件拥有属性的命令
chgrp -- 用于改变文件群组的命令
chattr -- 用于设置文件具有不可删除和修改权限
lsattr -- 用于显示文件或目录的隐藏属性
</code></pre>
<h2 id="5创建和删除目录的命令">5.创建和删除目录的命令</h2>
<pre><code>mkdir -- 用于创建目录
rmdir -- 永远忽删除空的目录
rm -f -- 用于删除不为空的目录
（千万不要用rm -rf /*!）
</code></pre>
<h2 id="6创建和删除-重用名-复制文件的命令">6.创建和删除、重用名、复制文件的命令</h2>
<pre><code>touch -- 创建一个新的文件
vi -- 创建一个新的文件
rm -- 删除文件或目录
mv -- 重命名或移动文件命令
cp -- 复制命令
scp -- 用于将本地的文件或目录复制到远程服务器
wget -- 用于下载ftp和http服务器的文件到本地
</code></pre>
<h2 id="7显示文件内容的命令">7.显示文件内容的命令</h2>
<pre><code>cat -- 用于显示指定文件的全部内容
more -- 用分页的形式显示指定文件的内容
less -- 用分页的形式显示指定文件的内容，区别是more和less翻页使用的操作键不同
head -- 用于显示文件前n行的内容
tail -- 用于显示文件后n行的内容
tail -f -- 用于自动刷新的显示文件后n行的数据内容
</code></pre>
<h2 id="8查找命令">8.查找命令</h2>
<pre><code>find -- 查找指定目录或文件的命令
whereis --  查找指定的文件源和二进制文件和手册等
which -- 用于查询命令或别名的位置
locate -- 快速找系统数据库中指定的内容
grep -- 在指定的文件或标准输出，标准输入内，查找满足条件的内容
</code></pre>
<h2 id="9关机和重启计算机的命令">9.关机和重启计算机的命令</h2>
<pre><code>shutdown -- 关机重启命令
常用参数：
-r 关机后立即重启
-k 并不真正的关机，而只是发出警告信息给所有用户
-h 关机后不重新启动
poweroff -- 用于关机和关闭电源
init -- 改变系统运行级别
0级用于关闭系统
1级用于单一使用者模式
2级用来进行多用户使用模式（但不带网络功能）
3级用来进行多用户使用模式（带网络功能）
4级用来进行用户自定义使用模式
5级表示进行x windows时模式
6级用来重启系统
reboot -- 用于计算机重启
halt -- 用于关闭计算机系统

</code></pre>
<h2 id="10压缩和打包命令">10.压缩和打包命令</h2>
<pre><code>tar -- 用于多个文件或目录进行打包，但不压缩，同时也用命令进行解包
gzip -- 用于文件进行压缩命令，文件拓展名为.gz结尾
gunzip -- 用于对gzip压缩文档进行解压缩
bzip2 -- 用于对文件或目录进行压缩或解压缩
bzcat -- 用于显示压缩文件的内容
compress/un compress -- 压缩/解压缩.z文件
zcat -- 查看z或gz结尾的压缩文件内容
gzexe -- 压缩可执行文件
unarg -- 解压缩.arj文件
zip/unzip -- 压缩解压缩.zip文件

</code></pre>
<h2 id="11用户操作命令">11.用户操作命令</h2>
<pre><code>su -- 切换用户命令
sudo -- 以系统管理员的身份执行命令
passwd -- 用于修改用户的命令

</code></pre>
<h2 id="12-文件链接命令">12、文件链接命令</h2>
<pre><code>ln -- 为源文件创建一个链接，，并不将源文件复制一份，即占用的空间很小。可以分为软链接和硬链接。
软链接（带参数-s）：也成为符号链接，即为文件或目录创建一个快捷方式
硬链接（不带参数-s）：给一个文件取多于一个名字，放在不同目录中，方便用户使用
ln命令参数如下：
-f 在创建链接时，先将与目的对象同名的文件或目录删除；
-d 允许系统管理者硬链接自己的目录；
-i 在删除与目的对象同名文件或目录时先询问用户；
-n 在创建软链接时，将目的对象视为一般的文件；
-s 创建软链接，即符号链接；
-v 在链接之前显示文件或目录名；
-b 将在链接时会被覆盖或删除的文件进行备份；

</code></pre>
<h2 id="13其他命令">13.其他命令</h2>
<pre><code>-ami 显示当前用户；
-u 显示使用者的动作/工作；
-s 使用简短的格式来显示；
-v 显示程序版本；
free -- 查看当前系统的内存使用情况。
uptime -- 显示系统运行了多长时间。
ps -- 显示瞬间进程的动态。
pstree -- 以树状方式显示系统中所有的进程。
date -- 显示或设定系统的日期与时间。
last -- 显示每月登陆系统的用户信息。
kill -- 杀死一些特定的进程。（常用 kill -9 进程号 强制杀死进程）
logout -- 退出系统。
useradd/userdel -- 添加用户/删除用户。
clear -- 清屏。
passwd -- 设置用户密码。

</code></pre>
<h2 id="14vi编辑器">14.vi编辑器</h2>
<pre><code>首先用vi命令打开一个文件
末行模式命令：
:n,m w path/filename 保存指定范围文档（n表开始行，m表结束行）；
:q! 对文件做过修改后，强制退出；
:q 没有对文件做过修改退出；
:wq或x 保存退出；
dd 删除光标所在行；
:set number 显示行号；
:n 跳转到n行；
:s 替换字符串 :s/test/test2/g (把test替换为test2)  /g全局替换 /也可以用%代替
/ 查找字符串；

</code></pre>
<h2 id="15常用管线命令">15.常用管线命令</h2>
<pre><code>cut  -- 显示行中的指定部分，删除文件中指定字段
sort -- 排序。
wc -- 用于计算字数。
uniq -- 用于检查及删除文本文件中重复出现的行列，通常与sort一起使用。
tr -- 转换或删除文件中的字符。
split -- 用于将一个文件分割成数个。
xargs -- 给命令传递参数的一个过滤器,也是组合多个命令的一个工具。
awk  -- 文本分析工具。

</code></pre>
<h2 id="16网络通信常用的命令">16.网络通信常用的命令</h2>
<pre><code>arp -- 网络地址显示及控制。
ftp -- 文件传输。
lftp -- 文件传输。
ncftp ：文件传输。
mail -- 发送/接收电子邮件。
mesg -- 允许或拒绝其他用户向自己所用的终端发送信息。
mutt --  E-mail 管理程序。
netstat -- 显示网络连接、路由表和网络接口信息。
pine -- 收发电子邮件，浏览新闻组。
ping -- 用于查看网络是否连接通畅。
ssh -- 安全模式下远程登陆。
telnet -- 远程登录。
talk -- 与另一用户对话。
traceroute -- 显示到达某一主机所经由的路径及所使用的时间。
write -- 向其它用户终端写信息。
rlogin -- 远程登录。

</code></pre>
<h2 id="17安全相关命令">17.安全相关命令</h2>
<pre><code>last -- ast命令显示用户最近的登录信息，在尝试跟踪更改或其他活动时通常很有用。
who （或 w） -- 显示系统中有哪些用户在使用。
ss -- 允许您执行诸如显示监听端口和活动连接之类的操作。
history -- 查看历史执行命令记录。

</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Markdown语法快速入门]]></title>
        <id>https://yanyecarr.github.io//post/markdown-yu-fa-kuai-su-ru-men</id>
        <link href="https://yanyecarr.github.io//post/markdown-yu-fa-kuai-su-ru-men">
        </link>
        <updated>2020-03-21T05:35:15.000Z</updated>
        <content type="html"><![CDATA[<h2 id="1标题"><strong>1.标题</strong></h2>
<pre><code class="language-python"># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题
###### 六级标题
####### 七级标题
</code></pre>
<h1 id="一级标题">一级标题</h1>
<h2 id="二级标题">二级标题</h2>
<h3 id="三级标题">三级标题</h3>
<h4 id="四级标题">四级标题</h4>
<h5 id="五级标题">五级标题</h5>
<h6 id="六级标题">六级标题</h6>
<p>####### 七级标题？</p>
<p>快捷键 ctrl+1-5</p>
<h2 id="2-字体"><strong>2、字体</strong></h2>
<pre><code class="language-python">// 粗体 ctrl+b
**你好呀，颜先森**
// 斜体 ctrl+I
*我喜欢你* 
// 删除线 ctrl+shift+5
~此内容为废弃内容~
//下划线 ctrl+u
哈哈哈




</code></pre>
<p><strong>具体效果如下</strong></p>
<p>// 粗体 ctrl+b</p>
<p><strong>你好呀，颜先生</strong></p>
<p>// 斜体 ctrl+I
<em>我喜欢你</em>
// 删除线 ctrl+shift+5
~此内容为废弃内容~</p>
<p>//下划线 ctrl+u
<u>哈哈哈</u></p>
<h2 id="3-引用">3、引用</h2>
<pre><code class="language-python">//引用语法如下：
&gt;快捷键 ctrl+shift+q
&gt;&gt;颜颜颜
&gt;&gt;&gt;颜颜颜
</code></pre>
<p>//引用语法如下：</p>
<blockquote>
<p>快捷键 ctrl+shift+q</p>
<blockquote>
<p>颜颜颜</p>
<blockquote>
<p>颜颜颜</p>
</blockquote>
</blockquote>
</blockquote>
<h2 id="4-分割线">4、分割线</h2>
<pre><code class="language-python">//分割线（长度根据内容而定）
---
//分割线（站全屏）
***
</code></pre>
<p>//分割线（长度根据内容而定）</p>
<p>//分割线（站全屏）</p>
<hr>
<h2 id="5-图片">5、图片</h2>
<pre><code class="language-python">//图片插入 ctrl+shift+i
![图片名称](图片地址)
</code></pre>
<p><img src="https://yanyecarr.github.io//post-images/1584789233923.jpg" alt="头像">)</p>
<h2 id="6-超链接">6、超链接</h2>
<pre><code>//超链接 ctrl + k
[点击跳转到我的博客](https://yanyecarr.github.io/)
</code></pre>
<p>//超链接
<a href="https://yanyecarr.github.io/">点击跳转到我的博客</a></p>
<h2 id="7-列表">7、列表</h2>
<pre><code>//有序列表：序号+点+空格 生成列表 ctrl+shift+[
1. 首页
2. 分类
3. 标题
//无需列表：-+空格 ctrl+shift+]
</code></pre>
<p><strong>有序：</strong></p>
<ol>
<li>首页</li>
<li>分类</li>
<li>标题</li>
</ol>
<p><strong>无序：</strong></p>
<ul>
<li>首页</li>
</ul>
<h2 id="8-插入表格">8、插入表格</h2>
<pre><code class="language-python">//鼠标右键-&gt;插入-&gt;表格
ctrl+t
</code></pre>
<table>
<thead>
<tr>
<th>姓名</th>
<th>年龄</th>
<th>爱好</th>
</tr>
</thead>
<tbody>
<tr>
<td>蔡</td>
<td>24</td>
<td>唱，跳，rap</td>
</tr>
</tbody>
</table>
<h2 id="9-代码块">9、代码块</h2>
<pre><code class="language-python">//代码块 ctrl+shift+k
```python 数字键盘1前面的点
</code></pre>
<pre><code class="language-python">
</code></pre>
]]></content>
    </entry>
</feed>